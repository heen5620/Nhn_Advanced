namespace...
defalut constructor? 

package prac_2;

public class MathxTest {
    private MathxTest() {} // defalut constructor defalut constructor가 저절로 생기는 것을 private을 사용해 막아준다.

    public static void main(String[] args) {
        MathxTest o = new MathxTest();
    }
}


#피보나치 수열

어떻게든 코드가 실행이 되도록 먼저 작성.

package prac_2;

public class Mathx {
    private Mathx() {}

    public static int fibonnacci(int n) {
        return 0;
    }

}

namespace만 사용하기 때문에 defalut constructor가 저절로 생기는 것을 private을 사용해 막아준다.

계산이 끝나는 지점 -> base condition

n이 얼마냐에 따라서 피보나치 문제의 크기는 n의 크기에 비례한다. 저기서 n은 문제의 크기를 정의한다 라고한다.


import static prac_2.Mathx.*; //두개의 namespace가 겹치는 위험한 짓?

  if (fibonacci(0) == 0 && fibonacci(1) == 1) //이 조건이 만족한다면 True를 반환하게끔, 아니면

  System.exit(1);

main함수는 누가 부르나?? => 어딘가의 약속,, 운영체제가 부른다..?

남이 부른 함수... call back 함수


pre condition test를 작성해야한다...


preCondition을 어떻게 구성을 해야하나
if(n < 0)
    return -1; // c언어에서 가장 일반적인 방법?


추상화 처리(abstraction handling)는 소프트웨어 설계 및 개발에서 추상화를 관리하거나 다루는 과정을 의미합니다. 추상화는 컴퓨터 과학과 프로그래밍에서 기본적인 개념으로, 복잡한 시스템이나 객체를 필수적인 특성에 초점을 맞추면서 불필요한 세부사항을 숨기고 모델이나 표현을 생성할 수 있게 해줍니다.

소프트웨어 개발에서 추상화는 시스템의 복잡성을 단순화하고, 코드를 더 관리 가능하고 유지보수 가능하며 확장 가능하도록 만들어줍니다. 아래는 소프트웨어 개발에서 추상화 처리의 주요 측면들입니다:

전체적으로 봤을때 Throwable 서브 타입임...
그 중에 런타임 익셉션에 서브 타입으로 ArguementException를 생성.

public static int fibonacci(int n) {
        if (n < 0)
            throw new ArguementException("fibonacci: n < 0"); // return이 아님 정상적인 흐름을 멈추고 상대가 내가 던진
                                                              // 공을 받아서 판단한다.


오늘 뭘 배웠는가? 테스트 코드를 작성하는 방법과 구조 대해서 
예외처리 프로세스, 어떻게 안전하게 코딩을 하는지에 대해...

피보나치를 블랙박스 테스팅을 진행했다. basecase, recursion을 테스트 했다. 
테스트 코드의 기본기.
baseCase , recursionCase를 만들어 테스트 케이스 틀을 만듬.

preCondition은 
다 끝난다음에 얘가 기본적으로 만족해야할 조건에 대해서 postcondition을 만든다. 
postcondition은 return 값을 검사하는 의도로 작성...?
postcondition은 말도 안되는 값이 들어왔을때 이것을 넘기는 방법을 안내해줘야 하는 것을 
postcondition으로 작성?


테스트 코드를 제대로 작성하지 않으면 , 디버깅하는데 시간을 다 잡아먹는다.

activation record


#TDO Recursion Call-Stack , fibonacci iterative version(while, for)
//factorial(int n = 3을 넣으면) #TDO
n * factorial(n-1)
n-1 * factorial(n-2)
n-2 * factorial(n-3).......
이런식으로 진행되고 만약에 factorial(0) = 1 이런식으로 진행되다가 
다시 역순으로 올라간다... 


  if (n < 0)
            throw new IllegalArgumentException("invalid error, negative! ");
        if (n == 0)
            return 1;
        return Math.multiplyExact(n, factorial(n - 1));



//https://kdoore.gitbook.io/cs1335-java-and-processing/getting-started/recursion/recursion-call-stack



fibonacci(n-1) + fibonacci(n-2)